Create database project;
-- -- -- TASK 1
CREATE TABLE Usertable
(UserID INT PRIMARY KEY,
 Name VARCHAR(255),
 Email VARCHAR(255) UNIQUE,
 Password VARCHAR(255),
 ContactNumber VARCHAR(20),
 Address TEXT);
 
CREATE TABLE Courier
(CourierID INT PRIMARY KEY,
 SenderName VARCHAR(255),
 SenderAddress TEXT,
 ReceiverName VARCHAR(255),
 ReceiverAddress TEXT,
 Weight DECIMAL(5, 2),
 Status VARCHAR(50),
 TrackingNumber VARCHAR(20) UNIQUE,
 DeliveryDate DATE,
 serviceID INT,
 EmployeeId INT);
 
 CREATE TABLE Service
 (ServiceID INT PRIMARY KEY,
 ServiceName VARCHAR(100),
 Cost DECIMAL(8, 2));
 
 CREATE table Employee
 (EmployeeID INT PRIMARY KEY,
 Name VARCHAR(255),
 Email VARCHAR(255) UNIQUE,
 ContactNumber VARCHAR(20),
 Role VARCHAR(50),
 Salary DECIMAL(10, 2));
 
 CREATE TABLE Location
 (LocationID INT PRIMARY KEY,
 LocationName VARCHAR(100),
 Address TEXT); 
 
 CREATE TABLE Payment
 (PaymentID INT PRIMARY KEY,
 CourierID INT,
 LocationId INT,
 Amount DECIMAL(10, 2),
 PaymentDate DATE,
 FOREIGN KEY (CourierID) REFERENCES Courier(CourierID),
 FOREIGN KEY (LocationID) REFERENCES Location(LocationID));
 
INSERT INTO usertable VALUES (100, 'RYA','RYA@gmail.com','RYA123',8585858585,'10,main road, Ramnad');
INSERT INTO usertable VALUES (101, 'MILKY','MILKY@gmail.com','MILKY987',1234567890,'20, cross road, ramnad');
INSERT INTO usertable VALUES (102, 'Krithi','krithi123@gmail.com','kri567',9876543210,'1st street, jayam colony, chennai');
INSERT INTO usertable VALUES (103, 'sakshi','sakshi123@gmail.com','shi567',9876567890,'2st street, main road, madurai ');
INSERT INTO usertable VALUES (104, 'Karthik','karthi23@gmail.com','karthi',98765423,'10th sterrt, chennai');
INSERT INTO usertable VALUES (105, 'Murugan','murugan123@gmail.com','shi567',987656780,'50, main road, madurai ');

INSERT INTO courier VALUES (1, 'Krithi','1st street, jayam colony, chennai','rakhi','50,krisha street,chennai',10.2,'waiting',2500,'2023-12-10',1,2);
INSERT INTO courier VALUES (2, 'Rya','10 main road, Ramnad','priya','1st street, jaya coloy, chennai',50.2,'waiting',50,'2023-12-15',2,2);
INSERT INTO courier VALUES (3, 'Sakshi','10 main road, madurai','priya','1st street, jaya coloy, chennai',25.20,'sheduled',51,'2023-12-01',2,3);
INSERT INTO courier VALUES (4, 'rya','10 main road, Ramnad','rakshi','50, krishna street,chennai',30,'delivered',45,'2023-11-27',2,3);

INSERT INTO service VALUES (1, 'post',10);
INSERT INTO service VALUES (2, 'parcel',50);

INSERT INTO Employee VALUES (1, 'Bala','gbm@gmail.com','818818818','manager',50000);
INSERT INTO Employee VALUES (2, 'kumar','kr123@mail.com','564564564','delivery person',20000);
INSERT INTO Employee VALUES (3, 'siva','siva@mail.com','5645123','delivery person',20000);
INSERT INTO Employee VALUES (4, 'john jam','jam@mail.com','5645145','delivery person',20000);

INSERT INTO location VALUES (1, 'chennai','10, main road, chennai');
INSERT INTO location VALUES (2, 'madurai','50, main road, madurai');
INSERT INTO location VALUES (3, 'ramnad','jaya colony, ramnad');

INSERT INTO payment VALUES (1,1,1,10,'2023-11-28');
INSERT INTO payment VALUES (2,2,3,50,'2023-11-28');
INSERT INTO payment VALUES (3,3,3,50, '2023-11-29');
INSERT INTO payment VALUES (4,4,1,60,'2023-11-27');


-- -- -- Task 2:

-- 1.  List all customers*/
    select name from usertable;
-- 2. List all orders for a specific customer:
	SELECT * from courier where CourierID= 1;
-- 3. List all couriers
	select * from courier;
-- 4. List all packages for a specific order
	select serviceName from service where ServiceID=2;
-- 5. List all deliveries for a specific courier:
	select courierid, sendername, receivername from courier where CourierID=1;
-- 6. List all undelivered packages
	select * from courier where status!='Delivered';
-- 7. List all packages that are scheduled for delivery today
	select * from courier where status='sheduled' AND Deliverydate='2023-12-01';
-- 8. List all packages with a specific status
	select * from courier where status='waiting';
-- 9. Calculate the total number of packages for each courier
	select s.servicename, count(c.courierId) from courier c, service S where S.serviceid=2;
-- 11. List all packages with a specific weight range
	select * from courier where weight between 10.0 and 50.0;
-- 12. Retrieve employees whose names contain 'John'
	select * from employee where name like '%john%';
-- 13.Retrieve all courier records with payments greater than $50
	select C. CourierID, C.sendername, C.ReceiverName, C.Status, P.paymentid, P.amount from courier C, Payment P where C. CourierID= P.CourierID having P.Amount>50;

    
    
-- -- -- -- TASK 3

-- 14. Find the total number of couriers handled by each employee.
	select E.EmployeeID, E.Name, count(C.CourierID) from Employee E, courier C group by E.EmployeeId;
    
-- 15. Calculate the total revenue generated by each location
	select L.LocationID, L.LocationName, sum(P.Amount) as TotalRevenue from Location L, Payment p
	group by L.LocationID order by L.LocationId;
    
-- 16. Find the total number of couriers delivered to each location
	select L.LocationID, L.LocationName, count(C.CourierID) as TotalCouriersDelivered
	from Location L, courier C	where C.Status = 'Delivered'
	group by L.LocationID;

-- 18. Find Locations with Total Payments Less Than a Certain Amount
	   
	select L.LocationID, L.LocationName, sum(P.Amount) as TotalPayment
	from Location L 
    join Payment P on L.LocationID = P.LocationID 
    group by L.LocationID
    having sum(P.Amount) < 1000;

-- 19. Calculate Total Payments per Location
	select L.LocationID, L.LocationName, sum(P.Amount) as TotalPayment
	from Location L
    left join Payment P on L.LocationID = P.LocationID 
    group by L.LocationID;

-- 20. Retrieve couriers who have received payments totaling more than $1000 in a specific location
	select distinct C.CourierID, C.SenderName, P.LocationID, P.Amount
	from Courier C, payment p WHERE P.LocationID =3 having P.Amount > 30;

-- 21. Retrieve couriers who have received payments totaling more than $1000 after a certain date (PaymentDate > 'YYYY-MM-DD')
	select C.* from Courier C, Payment P where P.PaymentDate > '2023-11-27' 
	group by C.CourierID having sum(P.Amount) > 1000;

-- 22. Retrieve locations where the total amount received is more than $5000 before a certain date (PaymentDate > 'YYYY-MM-DD')
	select L.LocationID, L.LocationName, sum(P.Amount) as TotalPayment from Location L , Payment P 
	where P.PaymentDate < '2023-11-29'  group by L.LocationID
	having sum(P.Amount)> 10;
    
    
-- -- -- -- TASK 4

-- 23. Retrieve Payments with Courier Information
	select P.*, C.*	from Payment P
	left join Courier C on P.CourierID = C.CourierID;

-- 24. Retrieve Payments with Location Information
	select P.*, L.* from Payment P
	left join Location L on P.LocationID = L.LocationID;

-- 25. Retrieve Payments with Courier and Location Information
	select P.PaymentID, P.Amount, C.CourierID, C.sendername, C.receivername, L.Locationid, L.Locationname from Payment P
	left join Courier C on P.CourierID = C.CourierID
	left join Location L on P.LocationID = L.LocationID;

-- 26. List all payments with courier details
	select P.*, C.*	from Payment P
	inner join Courier C on P.CourierID = C.CourierID;

-- 27. Total payments received for each courier
	select C.CourierID, sum(P.Amount) as TotalPaymentReceived from Courier C
	left join Payment P on C.CourierID = P.CourierID group by C.CourierID;

-- 28. List payments made on a specific date
	select * from Payment where PaymentDate = '2023-11-28';

-- 29. Get Courier Information for Each Payment
	select P.*, C.*	from Payment P
	left join Courier C on P.CourierID = C.CourierID;

-- 30. Get Payment Details with Location
	select P.*, L.*  from Payment P
	left join Location L on P.LocationID = L.LocationID;
    
-- 32. List Payments Within a Date Range
	select * from Payment
	where PaymentDate between '2023-11-29' and '2024-03-27';

-- 33. Retrieve a list of all users and their corresponding courier records, including cases where there are no matches on either side
	select U.*, C.*	from usertable U join courier C 
    on U.Name= C.sendername;

-- 34. Retrieve a list of all couriers and their corresponding services, including cases where there are no matches on either side
	SELECT S.*, C.*	FROM Courier C
	JOIN Service S ON C.ServiceID = S.ServiceID;

-- 35. Retrieve a list of all employees and their corresponding payments, including cases where there are no matches on either side
	SELECT E.*, P.* FROM Employee E
	JOIN Payment P ON E.EmployeeID = P.CourierID;

-- 36. List all users and all courier services, showing all possible combinations
	select U.*, S.* from usertable U cross join Service S;

-- 37. List all employees and all locations, showing all possible combinations
	select E.*, L.*	from Employee E
	cross join Location L;

-- 38. Retrieve a list of couriers and their corresponding sender information (if available)
	select C.courierId, U.*	from Courier C
	left join usertable U on C.SenderName = U.Name;

-- 39. Retrieve a list of couriers and their corresponding receiver information (if available)
	select CourierId, ReceiverName, ReceiverAddress from Courier;

-- 40. Retrieve a list of couriers along with the courier service details (if available)
	select S.*, C.* from Courier C
	right join Service S on C.ServiceID = S.ServiceID;

-- 41. Retrieve a list of employees and the number of couriers assigned to each employee
	select E.EmployeeID, E.Name, count(C.CourierID) as TotalCouriersAssigned
	from Employee E	left join Courier C on E.EmployeeID = C.EmployeeID
	group by E.EmployeeID;

-- 42. Retrieve a list of locations and the total payment amount received at each location
	select L.LocationID, L.LocationName, sum(P.Amount) as TotalPaymentReceived
	from Location L	left join Payment P on L.LocationID = P.LocationID
	group by L.LocationID;

-- 43. Retrieve all couriers sent by the same sender (based on SenderName)
	select * from Courier
	where SenderName in (select SenderName from Courier group by SenderName having count(*) > 1);

-- 44. List all employees who share the same role
	select employeeId, Name from employee where Role= "Delivery person";

-- 45. Retrieve all payments made for couriers sent from the same location
	select P.*, C.*	from Payment P
	inner join Courier C on P.CourierID = C.CourierID where P.Locationid=3;

-- 46. Retrieve all couriers sent from the same location (based on SenderAddress)
	select C1.* from Courier C1
	join Courier C2 on C1.SenderAddress = C2.SenderAddress
	where C1.CourierID <> C2.CourierID;

-- 47. List employees and the number of couriers they have delivered
	select E.EmployeeID, E.Name, count(C.CourierID) as Deliveredcouriers from Employee E
	left join Courier C on E.EmployeeID = C.EmployeeID
	where C.Status = 'Delivered' group by E.EmployeeID;
    
-- 48. Find couriers that were paid an amount greater than the cost of their respective courier service
	select C.CourierId, C.sendername,C.SenderAddress, C.receivername, C.weight, S.servicename, S.cost, P.amount as PaidAmount from Courier C
	inner join Payment P on C.CourierID = P.CourierID
	inner join Service S on C.ServiceID = S.ServiceID
	where P.Amount > S.Cost;
    
    
-- -- -- TASKS 5

-- 49. Find couriers that have a weight greater than the average weight of all couriers
	select * from Courier
	where Weight > (select avg(Weight) from Courier);

-- 50. Find the names of all employees who have a salary greater than the average salary
	select Name, Salary from Employee
	where Salary > (select avg(Salary) from Employee);

-- 51. Find the total cost of all courier services where the cost is less than the maximum cost
	select Cost from Service
	where Cost < (select max(Cost) from Service);

-- 52. Find all couriers that have been paid for
	select * from Courier C, Payment P
	where C.CourierID in (select CourierID from Payment);
	
-- 53. Find the locations where the maximum payment amount was made
	select L.LocationID, L.LocationName, P.Amount from Location L
	join Payment P on L.LocationID = P.LocationID
	where P.Amount = (select max(Amount) from Payment);

-- 54. Find all couriers whose weight is greater than the weight of all couriers sent by a specific sender (e.g., 'SenderName')
	select * from Courier
	where Weight > all (select Weight from Courier where SenderName = 'Krithi');
 